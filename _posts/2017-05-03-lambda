---
layout: post
title:  Java 8
subtitle: Easy quick intro
---

For those new to Java 8, these short codes will give a small glimpse of its operation. This post will be under continous update.

Area interface
````java
public interface Area {

    void area(String shape, String formula);
}
````
Or have many in a class

````java
public class myInterfaces {

    public interface Area2 {
        void calcArea();
    }

    public interface Area3 {
        void calcArea(String shape);
    }

    public interface Area4 {
        void calcArea(List<String> shapes);
    }
}

````

And the expression class

````java
@SpringBootApplication
public class ExpressionsApplication implements CommandLineRunner{

	final String circleShape = "circle";

	public static void main(String[] args) {
		SpringApplication.run(ExpressionsApplication.class, args);
	}

	@java.lang.Override
	public void run(java.lang.String... strings) throws Exception {

		lambdaExpressions();
		scopes();
		functionalInterface();
		methodReference();
		constructorReference();
		collections();
		optionals();
	}


	public void lambdaExpressions(){

		System.out.println("\n" + "-------------------------------- Lambda Expressions -------------------------------------------");


		Area circleArea = (String shape, String formula) -> { System.out.println("Formula for the area of a " + shape + " is: " + formula);};

		//Parameters without type declaration
		Area squareArea = (shape, formula) -> {System.out.println("Formula for the area of a " + shape + " is: " + formula);};

		//without return statement and without curly braces
		Area triangleArea = (shape, formula) -> System.out.println("Formula for the area of a " + shape + " is: " + formula);

		circleArea.area("circle", "πr2");
		triangleArea.area("triangle", "0.5*b*h");
		squareArea.area("square", "l*l");
	}


	public void scopes(){

		String triangleShape = "triangle";

		System.out.println("\n" + "--------------------------------Lambda Scopes----------------------------------------------");

		//If a variable is not local, it needs to be final so that it is not assigned a value a second time
		Area circleArea = (String shape, String formula) -> {System.out.println("Formula for the area of a " + circleShape + " is: " + formula);};
		circleArea.area(circleShape, "πr2");

		Area triangleArea = (shape, formula) -> System.out.println("Formula for the area of a " + triangleShape + " is: " + formula);
		triangleArea.area(triangleShape, "0.5*b*h");

		//triangleShape = "traingle";
		//System.out.println(triangleShape);

	}


	// Functional Interface

	public void functionalInterface(){

		// Anonymous Inner class

		/*
		Button bt = new Button();
		bt.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				System.out.println("Click Detected by Anon Class");
			}
		});


		ActionListener al = e -> System.out.println("Click Detected by Anon Class");
		bt.addActionListener(al);

		*/

		// Anonymous inner class
		Runnable r1 = new Runnable() {
			@Override
			public void run() {
				System.out.println("Anonymous runnable");
			}
		};

		// Lambda expression
		Runnable r2 = () -> System.out.println("Lambda runnable");

	}

	public void methodReference(){
		System.out.println("\n" + "--------------------------------Method References ---------------------------------------------");

		// static Method Reference
		Area circleArea = AreaImpl::circleArea;

		// this does not work because triangleArea impl method is not static
		//Area triangleArea = AreaImpl::triangleArea;


		//non-static method reference
		AreaImpl areaimpl = new AreaImpl();
		Area triangleArea2 =areaimpl::triangleArea;


	}

	public void constructorReference(){
		System.out.println("\n" + "--------------------------------Constructor References ----------------------------------------");

		//myInterfaces myInterfaces = new myInterfaces();
		List<String>shapes = Arrays.asList("Triangle", "rectangle");
		Area circleArea = AreaImpl::new;

		myInterfaces.Area2 shapenoParams = AreaConstImpl::new;
		myInterfaces.Area3 shapewithParams = AreaConstImpl::new;
		myInterfaces.Area4 shapeparamArgs = AreaConstImpl::<String>new;


		shapenoParams.calcArea();
		shapewithParams.calcArea("Circle");
		shapeparamArgs.calcArea(shapes);


	}

	public void collections(){
		System.out.println("\n" + "-------------------------------- Collections ----------------------------------------");

		List<String> shapes = Arrays.asList("Circle", "Ellipse", "Square", "Rectangle");

		//looping
		shapes.forEach(System.out::println);

		//Stream and filter
		shapes.stream()
				.filter((s)-> s.contains("s"))
				.forEach(System.out::println);

		//map
		shapes.stream()
				.filter((s)-> s.contains("s"))
				.map(String::toUpperCase)
				.forEach(System.out::println);

		//Results
		List<String> results = shapes
				.stream()
				.filter((s)-> s.contains("s"))
				.map(String::toUpperCase)
				.collect(Collectors.toList());

		results.forEach(System.out::println);


		//parallel stream
		shapes.parallelStream()
				.filter((s)-> s.contains("s"))
				.map(String::toUpperCase)
				.forEach(System.out::println);


	}

	public void optionals(){

		System.out.println("\n" + "-------------------------------- Optionals ----------------------------------------");

		Integer value1 = null;
		Integer value2 = new Integer(10);

		//Optional.ofNullable - allows passed parameter to be null.
		Optional<Integer> a = Optional.ofNullable(value1);

		//Optional.of - throws NullPointerException if passed parameter is null
		Optional<Integer> b = Optional.of(value2);

		System.out.println(" Sum: " + sum(a, b));
	}

	public Integer sum(Optional<Integer> a, Optional<Integer> b){

		//Optional.isPresent - checks the value is present or not

		System.out.println("First parameter is present: " + a.isPresent());
		System.out.println("Second parameter is present: " + b.isPresent());

		//Optional.orElse - returns the value if present otherwise returns
		//the default value passed.
		Integer value1 = a.orElse(new Integer(0));

		//Optional.get - gets the value, value should be present
		Integer value2 = b.get();
		return value1 + value2;
	}

}


````
